name: CI Workflow

on:
  push:
    branches:
      - 13-aplicar-sonarqube  # Cambia la rama aquí

jobs:
  sonar-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Build and Run SonarCloud Scanner
        run: |
          docker run --rm -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
          -v ${GITHUB_WORKSPACE}:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT }} \
          -Dsonar.organization=${{ env.SONAR_ORG }} \
          -Dsonar.sources=src \
          -Dsonar.host.url=https://sonarcloud.io

      - name: Obtener estado del análisis
        id: sonar_status
        run: |
          ANALYSIS_JSON=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${{ env.SONAR_PROJECT }}")
          echo "ANALYSIS_JSON=${ANALYSIS_JSON}" >> $GITHUB_ENV
          if [ -z "$ANALYSIS_JSON" ]; then
            echo "Error: ANALYSIS_JSON está vacío."
            exit 1
          fi

      - name: Obtener problemas del análisis
        id: sonar_issues
        run: |
          ISSUES_JSON=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/issues/search?componentKeys=${{ env.SONAR_PROJECT }}")
          echo "ISSUES_JSON=${ISSUES_JSON}" >> $GITHUB_ENV
          if [ -z "$ISSUES_JSON" ]; then
            echo "Error: ISSUES_JSON está vacío."
            exit 1
          fi

      - name: Generar reporte HTML
        run: |
          echo "<html><head><title>Reporte de SonarCloud</title></head><body>" > sonar_report.html
          echo "<h1>Reporte de Calidad para ${{ env.SONAR_PROJECT }}</h1>" >> sonar_report.html
          
          STATUS=$(echo "$ANALYSIS_JSON" | jq -r '.projectStatus.status')
          echo "<p>Estado: $STATUS</p>" >> sonar_report.html
          
          echo "<h2>Problemas Encontrados:</h2>" >> sonar_report.html
          echo "<table border='1'><tr><th>Severidad</th><th>Mensaje</th><th>Archivo</th><th>Línea</th><th>Tipo de Vulnerabilidad</th></tr>" >> sonar_report.html
          echo "$ISSUES_JSON" | jq -c '.issues[]' | while read -r issue; do
            ISSUE_MSG=$(echo "$issue" | jq -r '.message')
            ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity')
            ISSUE_FILE=$(echo "$issue" | jq -r '.component')
            ISSUE_LINE=$(echo "$issue" | jq -r '.line // "N/A"')
            ISSUE_TYPE=$(echo "$issue" | jq -r '.rule')
            echo "<tr><td>$ISSUE_SEVERITY</td><td>$ISSUE_MSG</td><td>$ISSUE_FILE</td><td>$ISSUE_LINE</td><td>$ISSUE_TYPE</td></tr>" >> sonar_report.html
          done
          echo "</table>" >> sonar_report.html
          echo "</body></html>" >> sonar_report.html

      - name: Save sonar report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sonar-report
          path: sonar_report.html

  build-and-push:
    runs-on: ubuntu-latest
    needs: sonar-scan
    outputs:
      version: ${{ steps.vars.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Get the version number
        id: vars
        run: |
          VERSION=1.0.$(git rev-list --count HEAD)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage:${{ env.VERSION }} .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage:${{ env.VERSION }}

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Get the latest Docker image tag
        id: get_latest_tag
        run: |
          TAGS_JSON=$(curl -s "https://registry.hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage/tags/")
          LATEST_TAG=$(echo $TAGS_JSON | jq -r '.results | sort_by(.last_updated) | last | .name')
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "Latest tag found: ${LATEST_TAG}"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: Release ${{ env.LATEST_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download sonar report artifact
        uses: actions/download-artifact@v3
        with:
          name: sonar-report

      - name: Upload sonar report to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: Release ${{ env.LATEST_TAG }}
          files: sonar_report.html
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Deploy the latest Docker image
        run: |
          echo "Pulling image: ${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage:${{ needs.build-and-push.outputs.version }}"
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage:${{ needs.build-and-push.outputs.version }}
          docker run -d -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/pgfanpage:${{ needs.build-and-push.outputs.version }}
