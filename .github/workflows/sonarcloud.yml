name: Tarea Automatizada de análisis de código

env:
  SONAR_ORG: 'pyfanpage'
  SONAR_PROJECT: 'pyfanpage'

on:
  push:
    branches:
      - "13-aplicar-sonarqube"
  workflow_dispatch:

jobs:
  sonar_scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v2

      - name: Build and Run SonarCloud Scanner
        run: |
          docker run --rm -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
          -v ${GITHUB_WORKSPACE}:/usr/src \
          sonarsource/sonar-scanner-cli \
          -Dsonar.projectKey=${{ env.SONAR_PROJECT }} \
          -Dsonar.organization=${{ env.SONAR_ORG }} \
          -Dsonar.sources=src \
          -Dsonar.host.url=https://sonarcloud.io

      - name: Obtener problemas del análisis
        id: sonar_issues
        run: |
          ISSUES_JSON=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "https://sonarcloud.io/api/issues/search?projectKeys=${{ env.SONAR_PROJECT }}&severities=BLOCKER,CRITICAL,MAJOR")
          echo "ISSUES_JSON=${ISSUES_JSON}" >> $GITHUB_ENV

      - name: Generar reporte HTML
        run: |
          echo "<html><head><title>Reporte de SonarCloud</title></head><body>" > sonar_report.html
          echo "<h1>Reporte de Calidad para ${{ env.SONAR_PROJECT }}</h1>" >> sonar_report.html
          
          # Verificar el contenido de ANALYSIS_JSON
          if [ -z "$ANALYSIS_JSON" ]; then
            echo "Error: ANALYSIS_JSON está vacío."
            exit 1
          fi

          # Obtener estado
          STATUS=$(echo "$ANALYSIS_JSON" | jq -r '.projectStatus.status')
          echo "<p>Estado: $STATUS</p>" >> sonar_report.html
          
          # Agregar condiciones al reporte
          echo "<h2>Condiciones de Calidad:</h2><ul>" >> sonar_report.html
          echo "$ANALYSIS_JSON" | jq -c '.projectStatus.conditions[]' | while read -r condition; do
            METRIC=$(echo "$condition" | jq -r '.metricKey')
            CONDITION_STATUS=$(echo "$condition" | jq -r '.status')
            echo "<li>$METRIC: $CONDITION_STATUS</li>" >> sonar_report.html
          done
          echo "</ul>" >> sonar_report.html

          # Agregar problemas al reporte
          echo "<h2>Problemas Encontrados:</h2><ul>" >> sonar_report.html
          echo "$ISSUES_JSON" | jq -c '.issues[]' | while read -r issue; do
            ISSUE_MSG=$(echo "$issue" | jq -r '.message')
            ISSUE_SEVERITY=$(echo "$issue" | jq -r '.severity')
            echo "<li>[$ISSUE_SEVERITY] $ISSUE_MSG</li>" >> sonar_report.html
          done
          echo "</ul>" >> sonar_report.html

          echo "</body></html>" >> sonar_report.html

      - name: Crear un nuevo release
        id: create_release
        run: |
          VERSION="1.0.0"  # Cambia esto según sea necesario
          RESPONSE=$(curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d "{\"tag_name\": \"v$VERSION\", \"name\": \"Release $VERSION\", \"body\": \"Reporte de calidad generado\"}")
          echo "RELEASE_ID=$(echo $RESPONSE | jq -r .id)" >> $GITHUB_ENV

      - name: Subir reporte al release
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: $(file -b --mime-type sonar_report.html)" \
          --data-binary @sonar_report.html \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=sonar_report.html"
